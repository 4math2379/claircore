// Code generated by "stringer -type tag,kind"; DO NOT EDIT.

package sqlite

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[tagHeaderImage-61]
	_ = x[tagHeaderSignatures-62]
	_ = x[tagHeaderImmutable-63]
	_ = x[tagHeaderRegions-64]
	_ = x[tagHeaderI18nTable-100]
	_ = x[_tagSigBase-256]
	_ = x[tagSigSize-257]
	_ = x[tagSigLeMD5-258]
	_ = x[tagSigPGP-259]
	_ = x[tagSigLeMD5_2-260]
	_ = x[tagSigMD5-261]
	_ = x[tagSigGPG-262]
	_ = x[tagSigGPG5-263]
	_ = x[tagBadSHA1_1-264]
	_ = x[tagBadSHA1_2-265]
	_ = x[tagPubKeys-266]
	_ = x[tagDSAHeader-267]
	_ = x[tagRSAHeader-268]
	_ = x[tagSHA1Header-269]
	_ = x[tagLongSigSize-270]
	_ = x[tagLongArchiveSize-271]
	_ = x[tagSHA256Header-273]
	_ = x[tagVeritySignatures-276]
	_ = x[tagVeritySignatureAlgo-277]
	_ = x[tagName-1000]
	_ = x[tagVersion-1001]
	_ = x[tagRelease-1002]
	_ = x[tagEpoch-1003]
	_ = x[tagSummary-1004]
	_ = x[tagDescription-1005]
	_ = x[tagBuildTime-1006]
	_ = x[tagBuildHost-1007]
	_ = x[tagInstallTime-1008]
	_ = x[tagSize-1009]
	_ = x[tagDistribution-1010]
	_ = x[tagVendor-1011]
	_ = x[tagGIF-1012]
	_ = x[tagXPM-1013]
	_ = x[tagLicense-1014]
	_ = x[tagPackager-1015]
	_ = x[tagGroup-1016]
	_ = x[tagChangelog-1017]
	_ = x[tagSource-1018]
	_ = x[tagPatch-1019]
	_ = x[tagURL-1020]
	_ = x[tagOS-1021]
	_ = x[tagArch-1022]
	_ = x[tagPreInstall-1023]
	_ = x[tagPostInstall-1024]
	_ = x[tagPreUninstall-1025]
	_ = x[tagPostUninstall-1026]
	_ = x[tagOldFilenames-1027]
	_ = x[tagFileSizes-1028]
	_ = x[tagFileStates-1029]
	_ = x[tagFileModes-1030]
	_ = x[tagFileUids-1031]
	_ = x[tagFileGids-1032]
	_ = x[tagFileRDevs-1033]
	_ = x[tagFileMTimes-1034]
	_ = x[tagFileDigests-1035]
	_ = x[tagFileLinkTos-1036]
	_ = x[tagFileFlags-1037]
	_ = x[tagRoot-1038]
	_ = x[tagFileUsername-1039]
	_ = x[tagFileGroupname-1040]
	_ = x[tagExclude-1041]
	_ = x[tagExclusive-1042]
	_ = x[tagIcon-1043]
	_ = x[tagSourceRPM-1044]
	_ = x[tagFileVerifyFlags-1045]
	_ = x[tagArchiveSize-1046]
	_ = x[tagProvideName-1047]
	_ = x[tagRequireFlags-1048]
	_ = x[tagRequireName-1049]
	_ = x[tagRequireVersion-1050]
	_ = x[tagNoSource-1051]
	_ = x[tagNoPatch-1052]
	_ = x[tagConflictFlags-1053]
	_ = x[tagConflictName-1054]
	_ = x[tagConflictVersion-1055]
	_ = x[tagDefaultPrefix-1056]
	_ = x[tagBuildRoot-1057]
	_ = x[tagInstallPrefix-1058]
	_ = x[tagExcludeArch-1059]
	_ = x[tagExcludeOS-1060]
	_ = x[tagExclusiveArch-1061]
	_ = x[tagExclusiveOS-1062]
	_ = x[tagAutoReqProv-1063]
	_ = x[tagRPMVersion-1064]
	_ = x[tagTriggerScripts-1065]
	_ = x[tagTriggerName-1066]
	_ = x[tagTriggerVersion-1067]
	_ = x[tagTriggerFlags-1068]
	_ = x[tagTriggerIndex-1069]
	_ = x[tagVerifyScript-1079]
	_ = x[tagChangelogTime-1080]
	_ = x[tagChangelogName-1081]
	_ = x[tagChangelogText-1082]
	_ = x[tagBrokenMD5-1083]
	_ = x[tagPreReq-1084]
	_ = x[tagPreInstallProg-1085]
	_ = x[tagPostInstallProg-1086]
	_ = x[tagPreUninstallProg-1087]
	_ = x[tagPostUninstallProg-1088]
	_ = x[tagBuildArchs-1089]
	_ = x[tagObsoleteName-1090]
	_ = x[tagVerifyScriptProg-1091]
	_ = x[tagTriggerScriptProg-1092]
	_ = x[tagDocDir-1093]
	_ = x[tagCookie-1094]
	_ = x[tagFileDevices-1095]
	_ = x[tagFileInodes-1096]
	_ = x[tagFileLangs-1097]
	_ = x[tagPrefixes-1098]
	_ = x[tagInstallPrefixes-1099]
	_ = x[tagTriggerInstall-1100]
	_ = x[tagTriggerUninstall-1101]
	_ = x[tagTriggerPostUninstall-1102]
	_ = x[tagAutoReq-1103]
	_ = x[tagAutoProv-1104]
	_ = x[tagCapability-1105]
	_ = x[tagSourcePackage-1106]
	_ = x[tagOldOriginalFilenames-1107]
	_ = x[tagBuildPreReq-1108]
	_ = x[tagBuildRequires-1109]
	_ = x[tagBuildConflicts-1110]
	_ = x[tagBuildMacros-1111]
	_ = x[tagProvideFlags-1112]
	_ = x[tagProvideVersion-1113]
	_ = x[tagObsoleteFlags-1114]
	_ = x[tagObsoleteVersion-1115]
	_ = x[tagDirindexes-1116]
	_ = x[tagBasenames-1117]
	_ = x[tagDirnames-1118]
	_ = x[tagOrigDirindexes-1119]
	_ = x[tagOrigBasenames-1120]
	_ = x[tagOrigDirnames-1121]
	_ = x[tagOptFlags-1122]
	_ = x[tagDistURL-1123]
	_ = x[tagPayloadFormat-1124]
	_ = x[tagPayloadCompressor-1125]
	_ = x[tagPayloadFlags-1126]
	_ = x[tagInstallColor-1127]
	_ = x[tagInstallTID-1128]
	_ = x[tagRemoveTID-1129]
	_ = x[tagSHA1RHN-1130]
	_ = x[tagRHNPlatform-1131]
	_ = x[tagPlatform-1132]
	_ = x[tagPatchesName-1133]
	_ = x[tagPatchesFlags-1134]
	_ = x[tagPatchesVersion-1135]
	_ = x[tagCacheCtime-1136]
	_ = x[tagCachePkgPath-1137]
	_ = x[tagCachePkgSize-1138]
	_ = x[tagCachePkgMtime-1139]
	_ = x[tagFileColors-1140]
	_ = x[tagFileClass-1141]
	_ = x[tagClassDict-1142]
	_ = x[tagFileDependsX-1143]
	_ = x[tagFileDependsN-1144]
	_ = x[tagDependsDict-1145]
	_ = x[tagSourcePkgID-1146]
	_ = x[tagFileContexts-1147]
	_ = x[tagFSContexts-1148]
	_ = x[tagREContexts-1149]
	_ = x[tagPolicies-1150]
	_ = x[tagPreTrans-1151]
	_ = x[tagPostTrans-1152]
	_ = x[tagPreTransProg-1153]
	_ = x[tagPostTransProg-1154]
	_ = x[tagDistTag-1155]
	_ = x[tagOldSuggestsName-1156]
	_ = x[tagOldSuggestsVersion-1157]
	_ = x[tagOldSuggestsFlags-1158]
	_ = x[tagOldEnhancesName-1159]
	_ = x[tagOldEnhancesVersion-1160]
	_ = x[tagOldEnhancesFlags-1161]
	_ = x[tagPriority-1162]
	_ = x[tagCVSID-1163]
	_ = x[tagBLinkPkgID-1164]
	_ = x[tagBLinkHdrID-1165]
	_ = x[tagBLinkNEVRA-1166]
	_ = x[tagFLinkPkgID-1167]
	_ = x[tagFLinkHdrID-1168]
	_ = x[tagFLinkNEVRA-1169]
	_ = x[tagPackageOrigin-1170]
	_ = x[tagTriggerPreInstall-1171]
	_ = x[tagBuildSuggests-1172]
	_ = x[tagBuildEnhances-1173]
	_ = x[tagScriptStates-1174]
	_ = x[tagScriptMetrics-1175]
	_ = x[tagBuildCPUClock-1176]
	_ = x[tagFileDigestAlgos-1177]
	_ = x[tagVariants-1178]
	_ = x[tagXMajor-1179]
	_ = x[tagXMinor-1180]
	_ = x[tagRepoTag-1181]
	_ = x[tagKeywords-1182]
	_ = x[tagBuildPlatforms-1183]
	_ = x[tagPackageColor-1184]
	_ = x[tagPackagePrefColor-1185]
	_ = x[tagXAttrsDict-1186]
	_ = x[tagFileXAttrsx-1187]
	_ = x[tagDepAttrsDict-1188]
	_ = x[tagConflictAttrsX-1189]
	_ = x[tagObsoleteAttrsX-1190]
	_ = x[tagProvideAttrsX-1191]
	_ = x[tagRequireAttrsX-1192]
	_ = x[tagBuildProvides-1193]
	_ = x[tagBuildObsoletes-1194]
	_ = x[tagDbInstance-1195]
	_ = x[tagNVRA-1196]
	_ = x[tagFilenames-5000]
	_ = x[tagFileProvide-5001]
	_ = x[tagFileRequire-5002]
	_ = x[tagFsNames-5003]
	_ = x[tagFsFizes-5004]
	_ = x[tagTriggerConds-5005]
	_ = x[tagTriggerType-5006]
	_ = x[tagOrigFileNames-5007]
	_ = x[tagLongFileSizes-5008]
	_ = x[tagLongSize-5009]
	_ = x[tagFileCaps-5010]
	_ = x[tagFileDigestAlgo-5011]
	_ = x[tagBugURL-5012]
	_ = x[tagEVR-5013]
	_ = x[tagNVR-5014]
	_ = x[tagNEVR-5015]
	_ = x[tagNEVRA-5016]
	_ = x[tagHeaderColor-5017]
	_ = x[tagVerbose-5018]
	_ = x[tagEpochNum-5019]
	_ = x[tagPreInstallFlags-5020]
	_ = x[tagPostInstallFlags-5021]
	_ = x[tagPreUninstallFlags-5022]
	_ = x[tagPostUninstallFlags-5023]
	_ = x[tagPreTransFlags-5024]
	_ = x[tagPostTransFlags-5025]
	_ = x[tagVerifyScriptFlags-5026]
	_ = x[tagTriggerScriptFlags-5027]
	_ = x[tagCollections-5029]
	_ = x[tagPolicyNames-5030]
	_ = x[tagPolicyTypes-5031]
	_ = x[tagPolicyTypesIndexes-5032]
	_ = x[tagPolicyFlags-5033]
	_ = x[tagVCS-5034]
	_ = x[tagOrderName-5035]
	_ = x[tagOrderVersion-5036]
	_ = x[tagOrderFlags-5037]
	_ = x[tagMSSFManifest-5038]
	_ = x[tagMSSFDomain-5039]
	_ = x[tagInstFilenames-5040]
	_ = x[tagRequireNEVRS-5041]
	_ = x[tagProvideNEVRS-5042]
	_ = x[tagObsoleteNEVRS-5043]
	_ = x[tagConflictNEVRS-5044]
	_ = x[tagFileNLinks-5045]
	_ = x[tagRecommendName-5046]
	_ = x[tagRecommendVersion-5047]
	_ = x[tagRecommendFlags-5048]
	_ = x[tagSuggestName-5049]
	_ = x[tagSuggestVersion-5050]
	_ = x[tagSuggestFlags-5051]
	_ = x[tagSupplementName-5052]
	_ = x[tagSupplementVersion-5053]
	_ = x[tagSupplementFlags-5054]
	_ = x[tagEnhanceName-5055]
	_ = x[tagEnhanceVersion-5056]
	_ = x[tagEnhanceFlags-5057]
	_ = x[tagRecommendNEVRS-5058]
	_ = x[tagSuggestNEVRS-5059]
	_ = x[tagSupplementNEVRS-5060]
	_ = x[tagEnhanceNEVRS-5061]
	_ = x[tagEncoding-5062]
	_ = x[tagFileTriggerInstall-5063]
	_ = x[tagFileTriggerUninstall-5064]
	_ = x[tagFileTriggerPostUninstall-5065]
	_ = x[tagFileTriggerScripts-5066]
	_ = x[tagFileTriggerScriptProg-5067]
	_ = x[tagFileTriggerScriptFlags-5068]
	_ = x[tagFileTriggerName-5069]
	_ = x[tagFileTriggerIndex-5070]
	_ = x[tagFileTriggerVersion-5071]
	_ = x[tagFileTriggerFlags-5072]
	_ = x[tagTransFileTriggerInstall-5073]
	_ = x[tagTransFileTriggerUninstall-5074]
	_ = x[tagTransFileTriggerPostUninstall-5075]
	_ = x[tagTransFileTriggerScripts-5076]
	_ = x[tagTransFileTriggerScriptProg-5077]
	_ = x[tagTransFileTriggerScriptFlags-5078]
	_ = x[tagTransFileTriggerName-5079]
	_ = x[tagTransFileTriggerIndex-5080]
	_ = x[tagTransFileTriggerVersion-5081]
	_ = x[tagTransFileTriggerFlags-5082]
	_ = x[tagRemovePathPostFixes-5083]
	_ = x[tagFileTriggerPriorities-5084]
	_ = x[tagTransFileTriggerPriorities-5085]
	_ = x[tagFileTriggerConds-5086]
	_ = x[tagFileTriggerType-5087]
	_ = x[tagTransFileTriggerConds-5088]
	_ = x[tagTransFileTriggerType-5089]
	_ = x[tagFileSignatures-5090]
	_ = x[tagFileSignatureLength-5091]
	_ = x[tagPayloadDigest-5092]
	_ = x[tagPayloadDigestAlgo-5093]
	_ = x[tagAutoInstalled-5094]
	_ = x[tagIdentity-5095]
	_ = x[tagModularityLabel-5096]
	_ = x[tagPayloadDigestAlt-5097]
	_ = x[tagArchSuffix-5098]
}

const (
	_tag_name_0 = "tagHeaderImagetagHeaderSignaturestagHeaderImmutabletagHeaderRegions"
	_tag_name_1 = "tagHeaderI18nTable"
	_tag_name_2 = "_tagSigBasetagSigSizetagSigLeMD5tagSigPGPtagSigLeMD5_2tagSigMD5tagSigGPGtagSigGPG5tagBadSHA1_1tagBadSHA1_2tagPubKeystagDSAHeadertagRSAHeadertagSHA1HeadertagLongSigSizetagLongArchiveSize"
	_tag_name_3 = "tagSHA256Header"
	_tag_name_4 = "tagVeritySignaturestagVeritySignatureAlgo"
	_tag_name_5 = "tagNametagVersiontagReleasetagEpochtagSummarytagDescriptiontagBuildTimetagBuildHosttagInstallTimetagSizetagDistributiontagVendortagGIFtagXPMtagLicensetagPackagertagGrouptagChangelogtagSourcetagPatchtagURLtagOStagArchtagPreInstalltagPostInstalltagPreUninstalltagPostUninstalltagOldFilenamestagFileSizestagFileStatestagFileModestagFileUidstagFileGidstagFileRDevstagFileMTimestagFileDigeststagFileLinkTostagFileFlagstagRoottagFileUsernametagFileGroupnametagExcludetagExclusivetagIcontagSourceRPMtagFileVerifyFlagstagArchiveSizetagProvideNametagRequireFlagstagRequireNametagRequireVersiontagNoSourcetagNoPatchtagConflictFlagstagConflictNametagConflictVersiontagDefaultPrefixtagBuildRoottagInstallPrefixtagExcludeArchtagExcludeOStagExclusiveArchtagExclusiveOStagAutoReqProvtagRPMVersiontagTriggerScriptstagTriggerNametagTriggerVersiontagTriggerFlagstagTriggerIndex"
	_tag_name_6 = "tagVerifyScripttagChangelogTimetagChangelogNametagChangelogTexttagBrokenMD5tagPreReqtagPreInstallProgtagPostInstallProgtagPreUninstallProgtagPostUninstallProgtagBuildArchstagObsoleteNametagVerifyScriptProgtagTriggerScriptProgtagDocDirtagCookietagFileDevicestagFileInodestagFileLangstagPrefixestagInstallPrefixestagTriggerInstalltagTriggerUninstalltagTriggerPostUninstalltagAutoReqtagAutoProvtagCapabilitytagSourcePackagetagOldOriginalFilenamestagBuildPreReqtagBuildRequirestagBuildConflictstagBuildMacrostagProvideFlagstagProvideVersiontagObsoleteFlagstagObsoleteVersiontagDirindexestagBasenamestagDirnamestagOrigDirindexestagOrigBasenamestagOrigDirnamestagOptFlagstagDistURLtagPayloadFormattagPayloadCompressortagPayloadFlagstagInstallColortagInstallTIDtagRemoveTIDtagSHA1RHNtagRHNPlatformtagPlatformtagPatchesNametagPatchesFlagstagPatchesVersiontagCacheCtimetagCachePkgPathtagCachePkgSizetagCachePkgMtimetagFileColorstagFileClasstagClassDicttagFileDependsXtagFileDependsNtagDependsDicttagSourcePkgIDtagFileContextstagFSContextstagREContextstagPoliciestagPreTranstagPostTranstagPreTransProgtagPostTransProgtagDistTagtagOldSuggestsNametagOldSuggestsVersiontagOldSuggestsFlagstagOldEnhancesNametagOldEnhancesVersiontagOldEnhancesFlagstagPrioritytagCVSIDtagBLinkPkgIDtagBLinkHdrIDtagBLinkNEVRAtagFLinkPkgIDtagFLinkHdrIDtagFLinkNEVRAtagPackageOrigintagTriggerPreInstalltagBuildSuggeststagBuildEnhancestagScriptStatestagScriptMetricstagBuildCPUClocktagFileDigestAlgostagVariantstagXMajortagXMinortagRepoTagtagKeywordstagBuildPlatformstagPackageColortagPackagePrefColortagXAttrsDicttagFileXAttrsxtagDepAttrsDicttagConflictAttrsXtagObsoleteAttrsXtagProvideAttrsXtagRequireAttrsXtagBuildProvidestagBuildObsoletestagDbInstancetagNVRA"
	_tag_name_7 = "tagFilenamestagFileProvidetagFileRequiretagFsNamestagFsFizestagTriggerCondstagTriggerTypetagOrigFileNamestagLongFileSizestagLongSizetagFileCapstagFileDigestAlgotagBugURLtagEVRtagNVRtagNEVRtagNEVRAtagHeaderColortagVerbosetagEpochNumtagPreInstallFlagstagPostInstallFlagstagPreUninstallFlagstagPostUninstallFlagstagPreTransFlagstagPostTransFlagstagVerifyScriptFlagstagTriggerScriptFlags"
	_tag_name_8 = "tagCollectionstagPolicyNamestagPolicyTypestagPolicyTypesIndexestagPolicyFlagstagVCStagOrderNametagOrderVersiontagOrderFlagstagMSSFManifesttagMSSFDomaintagInstFilenamestagRequireNEVRStagProvideNEVRStagObsoleteNEVRStagConflictNEVRStagFileNLinkstagRecommendNametagRecommendVersiontagRecommendFlagstagSuggestNametagSuggestVersiontagSuggestFlagstagSupplementNametagSupplementVersiontagSupplementFlagstagEnhanceNametagEnhanceVersiontagEnhanceFlagstagRecommendNEVRStagSuggestNEVRStagSupplementNEVRStagEnhanceNEVRStagEncodingtagFileTriggerInstalltagFileTriggerUninstalltagFileTriggerPostUninstalltagFileTriggerScriptstagFileTriggerScriptProgtagFileTriggerScriptFlagstagFileTriggerNametagFileTriggerIndextagFileTriggerVersiontagFileTriggerFlagstagTransFileTriggerInstalltagTransFileTriggerUninstalltagTransFileTriggerPostUninstalltagTransFileTriggerScriptstagTransFileTriggerScriptProgtagTransFileTriggerScriptFlagstagTransFileTriggerNametagTransFileTriggerIndextagTransFileTriggerVersiontagTransFileTriggerFlagstagRemovePathPostFixestagFileTriggerPrioritiestagTransFileTriggerPrioritiestagFileTriggerCondstagFileTriggerTypetagTransFileTriggerCondstagTransFileTriggerTypetagFileSignaturestagFileSignatureLengthtagPayloadDigesttagPayloadDigestAlgotagAutoInstalledtagIdentitytagModularityLabeltagPayloadDigestAlttagArchSuffix"
)

var (
	_tag_index_0 = [...]uint8{0, 14, 33, 51, 67}
	_tag_index_2 = [...]uint8{0, 11, 21, 32, 41, 54, 63, 72, 82, 94, 106, 116, 128, 140, 153, 167, 185}
	_tag_index_4 = [...]uint8{0, 19, 41}
	_tag_index_5 = [...]uint16{0, 7, 17, 27, 35, 45, 59, 71, 83, 97, 104, 119, 128, 134, 140, 150, 161, 169, 181, 190, 198, 204, 209, 216, 229, 243, 258, 274, 289, 301, 314, 326, 337, 348, 360, 373, 387, 401, 413, 420, 435, 451, 461, 473, 480, 492, 510, 524, 538, 553, 567, 584, 595, 605, 621, 636, 654, 670, 682, 698, 712, 724, 740, 754, 768, 781, 798, 812, 829, 844, 859}
	_tag_index_6 = [...]uint16{0, 15, 31, 47, 63, 75, 84, 101, 119, 138, 158, 171, 186, 205, 225, 234, 243, 257, 270, 282, 293, 311, 328, 347, 370, 380, 391, 404, 420, 443, 457, 473, 490, 504, 519, 536, 552, 570, 583, 595, 606, 623, 639, 654, 665, 675, 691, 711, 726, 741, 754, 766, 776, 790, 801, 815, 830, 847, 860, 875, 890, 906, 919, 931, 943, 958, 973, 987, 1001, 1016, 1029, 1042, 1053, 1064, 1076, 1091, 1107, 1117, 1135, 1156, 1175, 1193, 1214, 1233, 1244, 1252, 1265, 1278, 1291, 1304, 1317, 1330, 1346, 1366, 1382, 1398, 1413, 1429, 1445, 1463, 1474, 1483, 1492, 1502, 1513, 1530, 1545, 1564, 1577, 1591, 1606, 1623, 1640, 1656, 1672, 1688, 1705, 1718, 1725}
	_tag_index_7 = [...]uint16{0, 12, 26, 40, 50, 60, 75, 89, 105, 121, 132, 143, 160, 169, 175, 181, 188, 196, 210, 220, 231, 249, 268, 288, 309, 325, 342, 362, 383}
	_tag_index_8 = [...]uint16{0, 14, 28, 42, 63, 77, 83, 95, 110, 123, 138, 151, 167, 182, 197, 213, 229, 242, 258, 277, 294, 308, 325, 340, 357, 377, 395, 409, 426, 441, 458, 473, 491, 506, 517, 538, 561, 588, 609, 633, 658, 676, 695, 716, 735, 761, 789, 821, 847, 876, 906, 929, 953, 979, 1003, 1025, 1049, 1078, 1097, 1115, 1139, 1162, 1179, 1201, 1217, 1237, 1253, 1264, 1282, 1301, 1314}
)

func (i tag) String() string {
	switch {
	case 61 <= i && i <= 64:
		i -= 61
		return _tag_name_0[_tag_index_0[i]:_tag_index_0[i+1]]
	case i == 100:
		return _tag_name_1
	case 256 <= i && i <= 271:
		i -= 256
		return _tag_name_2[_tag_index_2[i]:_tag_index_2[i+1]]
	case i == 273:
		return _tag_name_3
	case 276 <= i && i <= 277:
		i -= 276
		return _tag_name_4[_tag_index_4[i]:_tag_index_4[i+1]]
	case 1000 <= i && i <= 1069:
		i -= 1000
		return _tag_name_5[_tag_index_5[i]:_tag_index_5[i+1]]
	case 1079 <= i && i <= 1196:
		i -= 1079
		return _tag_name_6[_tag_index_6[i]:_tag_index_6[i+1]]
	case 5000 <= i && i <= 5027:
		i -= 5000
		return _tag_name_7[_tag_index_7[i]:_tag_index_7[i+1]]
	case 5029 <= i && i <= 5098:
		i -= 5029
		return _tag_name_8[_tag_index_8[i]:_tag_index_8[i+1]]
	default:
		return "tag(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[typeNull-0]
	_ = x[typeChar-1]
	_ = x[typeInt8-2]
	_ = x[typeInt16-3]
	_ = x[typeInt32-4]
	_ = x[typeInt64-5]
	_ = x[typeString-6]
	_ = x[typeBin-7]
	_ = x[typeStringArray-8]
	_ = x[typeI18nString-9]
}

const _kind_name = "typeNulltypeChartypeInt8typeInt16typeInt32typeInt64typeStringtypeBintypeStringArraytypeI18nString"

var _kind_index = [...]uint8{0, 8, 16, 24, 33, 42, 51, 61, 68, 83, 97}

func (i kind) String() string {
	if i >= kind(len(_kind_index)-1) {
		return "kind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _kind_name[_kind_index[i]:_kind_index[i+1]]
}
